CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(solver C CXX)

# Project uses C++17
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)


# Ouput directory for both library and executables.
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "" FORCE)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "" FORCE)

# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
IF(NOT BUILD_SHARED_LIBS)
    SET(CMAKE_EXE_LINKER_FLAGS "-static")
    SET(LINK_SEARCH_START_STATIC TRUE)
ENDIF(NOT BUILD_SHARED_LIBS)

OPTION(BUILD_WITH_TEST "Enable Testing." ON)
OPTION(BUILD_WITH_DOCS "Build documentation." OFF)


# GCC compiler flag options.
IF((CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX) AND NOT CMAKE_COMPILER_IS_MINGW)
    IF (BUILD_SHARED_LIBS AND CMAKE_SIZEOF_VOID_P EQUAL 8) # -fPIC is only required
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    ENDIF()

    ADD_DEFINITIONS(-Wall -w)
    ADD_DEFINITIONS()
    IF (CMAKE_BUILD_TYPE STREQUAL "Release")
        MESSAGE(STATUS "Compile for release.")
        ADD_DEFINITIONS(-DNDEBUG)
        ADD_DEFINITIONS(-O2)
        SET(CMAKE_RELEASE TRUE)
        SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -s")
    ELSE()
        MESSAGE(STATUS "Compile for debug.")
        ADD_DEFINITIONS(-D_DEBUG)
        ADD_DEFINITIONS(-g3 -O0)
        SET(CMAKE_DEBUG TRUE)
        ADD_DEFINITIONS(-D_GLIBCXX_ASSERTIONS)
    ENDIF()

    #
    IF(BUILD_WITH_COVERAGE)
        MESSAGE(STATUS "Building with coverage")
        SET(GCC_COVERAGE_COMPILE_FLAGS "--coverage -fprofile-arcs -ftest-coverage")
        SET(GCC_COVERAGE_LINK_FLAGS    "-lgcov")
        SET(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
        SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
    ENDIF()

    #
    IF(BUILD_WITH_PROFILER)
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
    ENDIF()

ENDIF()

# Core library
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/core)

# Core Math library
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/math)

# Example Projects
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/console)

# Test
IF(BUILD_WITH_TEST)
	ENABLE_TESTING()
    ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
ENDIF()
